class Node{
  constructor(val){
    this.val = val;
    this.next = null;
  }
}

class SinglyLinkedList{
  constructor(){
    this.length = 0;
    this.head = null;
    this.tail = null;
  }

  push(val){
    var node = new Node(val);
    if (this.length === 0) {
      this.head = node;
      this.tail = node;
    } else {
      this.tail.next = node;
      this.tail = node;
    }
    this.length++;
    return this;
  }
  pop(){
    if (this.length === 0) {
      return undefined;
    }
    if (this.length === 1) {
      var node = this.head;
      this.head = null;
      this.tail = null;
      this.length--;
      return node;
    }
    var last;
    var secondToLast;
    var current = this.head;
    while (current.next) {
      secondToLast = current;
      last = current.next;
      current = current.next;
    }
    this.length--;
    this.tail = secondToLast;
    this.tail.next = null;
    return last;
  }
  shift(){
    if(this.length === 0) {
      return undefined;
    }
    if(this.length === 1) {
      var node = this.head;
      this.head = null;
      this.tail = null;
      this.length--;
      return node;
    }
    var node = this.head;
    this.head = this.head.next;
    this.length--;
    return node;
  }
  unshift(val){
    var node = this.head;
    this.head = new Node(val);
    this.head.next = node;
    this.length++;
  }
  get(index) {
    if (index < 0 || index >= this.length) {return undefined}
    var current = this.head;

    for (var i = 1; i < index + 1; i++) {
      current = current.next;
    }

    return current;
  }
  set(index, val) {
    if (index < 0 || index >= this.length) {return undefined}
    var current = this.head;

    for (var i = 1; i < index + 1; i++) {
      current = current.next;
    }
    current.val = val;
    return current;
  }
  insert(index, val) {
    if (index < 0 || index >= this.length) {return undefined}
    var current = this.head;

    for (var i = 1; i < index; i++) {
      current = current.next;
    }
    var node = current.next;
    current.next = new Node(val);
    current.next.next = node;
    this.length++;
    return current.next;
  }
  remove(index) {
    if (index < 0 || index >= this.length) {return undefined}
    var current = this.head;

    for (var i = 1; i < index; i++) {
      current = current.next;
    }

    var remove = current.next;
    current.next = current.next.next;
    this.length--

    return remove;
  }
}

var list = new SinglyLinkedList();
list.push(0);
list.push(1);
list.push(2);
list.push(3);
console.log(list.remove(1));
console.log(list)